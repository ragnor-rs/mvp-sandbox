package io.reist.sandbox.core.view;

import android.app.Activity;
import android.app.Fragment;
import android.content.Context;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.support.annotation.LayoutRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import java.util.ArrayList;
import java.util.List;

import butterknife.ButterKnife;
import io.reist.sandbox.core.BaseApplication;
import io.reist.sandbox.core.ComponentCache;
import io.reist.sandbox.core.presenter.BasePresenter;

public abstract class BaseFragment<P extends BasePresenter> extends Fragment implements BaseView {

    private static final int PERMISSION_REQUEST_CODE_GROUP = 0xab;

    private static final String ARG_STATE_COMPONENT_ID = "ARG_STATE_COMPONENT_ID";
    private static final String ARG_LAYOUT_RES_ID = "ARG_LAYOUT_RES_ID";

    public static <T extends BaseFragment> T newInstance(Class<T> clazz, @LayoutRes int layoutResId) {
        try {
            T f = clazz.newInstance();

            Bundle args = new Bundle();
            args.putInt(ARG_LAYOUT_RES_ID, layoutResId);
            f.setArguments(args);

            return f;
        } catch (java.lang.InstantiationException e) {
            return null;
        } catch (IllegalAccessException e) {
            return null;
        }
    }

    public interface FragmentController {
        /**
         * @param fragment - fragment to display
         * @param remove   - boolean, stays for whether current fragment should be thrown away or stay in a back stack.
         *                 false to stay in a back stack
         */
        void showFragment(BaseFragment fragment, boolean remove);
    }

    private Runnable runnable;

    private Long componentId;
    private boolean stateSaved;
    private int layoutResId;


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        layoutResId = getArguments().getInt(ARG_LAYOUT_RES_ID);

        componentId = savedInstanceState == null ? null : savedInstanceState.getLong(ARG_STATE_COMPONENT_ID);
        stateSaved = false;

        inject(getComponent());
    }

    @SuppressWarnings("unused")
    public final void runPrivileged(@NonNull Runnable runnable, String... permissions) {

        Activity activity = getActivity();

        List<String> deniedPermissions = new ArrayList<>();
        for (String permission : permissions) {
            if (ContextCompat.checkSelfPermission(activity, permission) != PackageManager.PERMISSION_GRANTED) {
                deniedPermissions.add(permission);
            }
        }

        if (deniedPermissions.isEmpty()) {
            runnable.run();
        } else {

            this.runnable = runnable;

            String[] permissionArray = new String[deniedPermissions.size()];
            for (int i = 0; i < permissionArray.length; i++) {
                permissionArray[i] = deniedPermissions.get(i);
            }

            ActivityCompat.requestPermissions(
                    activity,
                    permissionArray,
                    PERMISSION_REQUEST_CODE_GROUP
            );

        }

    }

    /// --- ///

    public final String getName() {
        return getClass().getName();
    }

    /// --- ///

    @Override
    public Context context() {
        return getActivity();
    }

    @Override
    public final Long getComponentId() {
        return componentId;
    }

    /**
     * Sets component id for current view
     * @param componentId - unique id generated by ComponentCache
     */
    @Override
    public final void setComponentId(Long componentId) {
        this.componentId = componentId;
    }

    @Override
    public final Object getComponent() {
        return getComponentCache().getComponentFor(this);
    }

    private ComponentCache getComponentCache() {
        BaseApplication application = (BaseApplication) getActivity().getApplication();
        return application.getComponentCache();
    }

    /// --- ///

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(layoutResId, container, false);
        ButterKnife.bind(this, view);
        return view;
    }

    @SuppressWarnings("unchecked") //todo setView should be checked call
    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        if (getPresenter() != null) {
            ButterKnife.bind(getPresenter(), view);
            getPresenter().setView(this);
        }
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putLong(ARG_STATE_COMPONENT_ID, componentId);
        stateSaved = true;
    }

    @SuppressWarnings("unchecked") //todo setView should be type safe call
    @Override
    public void onDestroyView() {
        super.onDestroyView();
        if (!stateSaved) {
            getComponentCache().invalidateComponentFor(this);
        }
        if (getPresenter() != null)
            getPresenter().setView(null);
    }

    /// --- ///

    protected abstract void inject(Object from);

    protected abstract P getPresenter();

    protected FragmentController getFragmentController() {
        Object a = getActivity();
        if (a instanceof FragmentController) {
            return (FragmentController) a;
        } else {
            throw new IllegalArgumentException("Can't find " + FragmentController.class.getSimpleName());
        }
    }

}
